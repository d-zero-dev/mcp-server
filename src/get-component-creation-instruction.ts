/**
 * Returns the instructions for a specific step in the component creation process.
 * @param step The step number (defaults to 1).
 * @returns The instructions for the given step as a string.
 */
export function getComponentCreationInstruction(step: number = 1) {
	switch (step) {
		case 1: {
			return [
				'FigmaデータのURLをユーザーに要求せよ。',
				'ユーザーがURLを入力したらMCPサーバ経由でデータを取得せよ。',
				'得られたファイルパスをmvコマンドで`.cache/figma-data.json`で保存し、ステップ2を実行せよ。',
				'ユーザーがURLを入力しなかったら、ステップ4を実行せよ。',
			].join('\n');
		}
		case 2: {
			return [
				'ステップ1で得られたFigmaデータを読み込め。',
				'ここでどんなコンポーネントを作るのか記憶せよ。',
				'Figmaデータのトップレイヤーのフレーム名をコンポーネント名にせよ。',
				'カスタム要素が含まれていてもそれはコンポーネントの一部であり、別々で生成する必要はない。',
				'コンポーネントが不明瞭な場合、Figmaのレイヤー名を変更するようにユーザーに警告、ステップは継続せず全タスクを終了せよ。',
				'コンポーネントが名が判明したらステップ3を実行せよ。',
			].join('\n');
		}
		case 3: {
			return [
				'FigmaのFileデータから全体のnodeIdをMCPサーバの画像取得APIに渡し全体の画像を取得せよ。',
				'MCPサーバから返却されたURLをcurlして、`.cache/コンポーネント名.png`として保存。',
				'URLをブラウザで開いてはいけない。',
				'これらのタスクが完了したら、ステップ4を実行せよ。',
			].join('\n');
		}
		case 4: {
			return [
				'`.cache/コンポーネント名.png`を解析し全体デザインを確認し、構造やスタイルを分析せよ。',
				'Figmaデータに`boundVariables`ノードをもつ場合、ユーザーにVariablesの詳細情報を要求せよ。',
				'ユーザーの最初の指示に含まれている場合もあるので、思い出すこと。',
				'ユーザーからVariablesの詳細情報を得られたら、ステップ5を実行せよ。',
				'拒否されたら、ステップ6を実行せよ。',
			].join('\n');
		}
		case 5: {
			return [
				'`__assets/_libs/style/base/root.scss`を開け。',
				'たとえば`--primary-color[VariableCollectionId:5:13/VariableID:5:14]={"r":0.9529411792755127,"g":0.572549045085907,"b":0,"a":1}`を受け取っていれば`--primary-color: rgb(243 156 18 / 100%);`のように変換せよ。',
				'Variables変換したCSSカスタムプロパティとして`:root`に上書きせずに追記せよ。',
				'「カラーシンタックスがフォーマットと異なる」類のstylelintエラーはこのステップでは無視してよい。',
				'これらのタスクが完了したら、ステップ6を実行せよ。',
			].join('\n');
		}
		case 6: {
			return [
				'Figmaのデータにカスタム要素が存在するか確認せよ。',
				'存在する場合はコーディングガイドラインでウェブコンポーネントの情報を確認し`c`をプレフィックスとしてカスタム要素名を記憶せよ。',
				'**注意**: カスタム要素が含まれたとしてもコンポーネントの一部であり別々で生成する必要はない。',
				'これらのタスクが完了したら、ステップ7を実行せよ。',
			].join('\n');
		}
		case 7: {
			return [
				'ステップ1で`.cache/コンポーネント名.json`に保存していた場合データを読み込め。',
				'ステップ2で`.cache/コンポーネント名.png`に保存していた場合画像を画像解析せよ。',
				'画像化する必要があるFigmaノードを特定せよ。',
				'カスタム要素に相当するノード内は無視すること。',
				'MCPサーバ経由で画像のURLを取得し、curlで`htdocs/img/`に保存せよ。',
				'命名はコーディングガイドラインのメディア規定に従うこと。',
				'サブディレクトリは作らないこと。',
				'SVGもsvgファイル画像として保存すること。',
				'これらのタスクが完了したら、ステップ8を実行せよ。',
			].join('\n');
		}
		case 8: {
			return [
				'HTMLを作成する。',
				'作成するのはFigmaのトップレイヤーのコンポーネントのみである。',
				'コーディングガイドラインでHTMLの情報を確認せよ。',
				'確認ができたら、作成するコンポーネントの名前でpugファイルを作成（場所は`__assets/_libs/component/コンポーネント名.pug`）せよ。',
				'コンポーネント名はガイドラインの命名規則に従うこと。',
				'既にファイルが存在する場合は、そのファイルを上書きせよ。',
				'要素の順番はスクリーンリーダーやフォーカスの順番に依存し重要であるため、Figmaレイヤーの順番にはこだわらず、情報設計的な在り方を最優先に視覚的な配置を加味して順番を決定すること。',
				'**カスタム要素の要素名のプレフィックスは`c-`をつけること。**',
				'インラインSVGは作ってはならない。必要なのであればステップ7に戻って再作成すること。',
				'これらのタスクが完了したら、ステップ9を実行せよ。',
			].join('\n');
		}
		case 9: {
			return [
				'作成したコンポーネントファイルで代替テキストが必要か確認せよ。',
				'必要な場合は、コーディングガイドラインで代替テキストの情報を確認せよ。',
				'確認ができたら、ファイルを修正せよ。',
				'これらのタスクが完了したら、ステップ10を実行せよ。',
			].join('\n');
		}
		case 10: {
			return [
				'CSSを作成する。',
				'一般的なCSSの実装方法を一切忘れてのぞめ。',
				'コーディングガイドラインでCSSの情報を確認せよ。',
				'ステップ1で`.cache/コンポーネント名.json`に保存していた場合データを読み込め。',
				'ステップ2で`.cache/コンポーネント名.png`に保存していた場合画像を画像解析せよ。',
				'ステップ8で作成したpugファイルを読み込め。',
				'確認ができたら、作成するコンポーネントの名前でscssファイルを作成（場所は`__assets/_libs/component/コンポーネント名.scss`）せよ。',
				'コンポーネント名はガイドラインの命名規則に従うこと。',
				'これらJSONと画像とHTMLを解析して、コンポーネントのスタイルを生成せよ。',
				'**レスポンシブが想定されていてもメディアクエリを使用して非表示の要素を作らないこと。**',
				'**レスポンシブが想定されていてもメディアクエリを使用して非表示の要素を作らないこと！**',
				'**レスポンシブが想定されていてもメディアクエリを使用して非表示の要素を作らないこと！！！**',
				'**Figmaデータからあるがままスタイルに変換すること。**',
				'**カスタム要素のカスタムプロパティは反映すること。**',
				'**カスタム要素が固定のサイズを持つ場合は、`inline-size`などで指定すること。**',
				'HTMLと同様にカスタム要素のプレフィックスは`c-`である。',
				'stylelintのエラーが発生した場合は、直接編集せず、`npx stylelint --fix <fileName>`を実行せよ。',
				'stylelintのselector-type-no-unknownエラーが発生している場合、カスタム要素の命名が間違っているので、ステップ7に戻って必要な部分だけ修正せよ。',
				'これらのタスクが完了したら、ステップ11を実行せよ。',
			].join('\n');
		}
		case 11: {
			return [
				'カスタム要素を使用していた場合は、JSに`@d-zero/custom-components`を読み込め。',
				'```ts',
				'import { defineXXXXX } from "@d-zero/custom-components/XXXXX";',
				'defineXXXXX("c"); // プレフィックスは"c-"',
				'```',
				'としろ。',
				'__assets/htdocs/js/script.tsに上書きせずに追記せよ。',
				'**他の実装は不要。**',
				'**他の実装は不要！**',
				'**他の実装は不要！！！**',
				'これらのタスクが完了したら、ステップ12を実行せよ。',
			].join('\n');
		}
		case 12: {
			return [
				'コンポーネントがどのページに影響するかを報告せよ。',
				'どのページかどうかは`__assets/htdocs/`ディレクトリ内から`@include`もしくはクラス名を検索して特定せよ。',
				'CLIを使って検索しても構わない。',
				'これらのタスクが完了したら、ステップ13を実行せよ。',
			].join('\n');
		}
		case 13: {
			return [
				'`git status`を実行して、変更があったファイルとその内容を確認せよ。',
				'差分は`git --no-pager diff <fileName>`で実行せよ。',
				'内容に問題があれば、各ステップに戻り修正せよ。',
			].join('\n');
		}
	}
	return [
		'コンポーネント作成タスク完了である。',
		'なお、以下は実行しなくてよし。',
		'- テストコード作成',
		'- サンプルページ作成',
		'- ブラウザチェック',
		'- ビルドコマンド実行',
	].join('\n');
}
